import org.apache.spark.SparkConf
import org.apache.spark.sql.expressions.{UserDefinedFunction, Window}
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types.{StringType, TimestampType}
import org.apache.spark.sql._

/**
 * @Auther: wxf
 * @Date: 2023/10/26 10:16:23
 * @Description: SparkSessionDemo
 * @Version 1.0.0
 */
object SparkSessionDemo1 {

  val conf: SparkConf = new SparkConf()
  val sparkSession: SparkSession = SparkSession.builder().appName("SparkSessionDemo")
    .config(conf)
    .config("spark.sql.crossJoin.enabled", "true")
    .master("local[*]").getOrCreate()

  import sparkSession.implicits._

  def main(args: Array[String]): Unit = {

    val meterPowerOffPointDf: DataFrame = getMeterPowerOffPoint(sparkSession)
    meterPowerOffPointDf.orderBy($"METER_ID")
      .select($"METER_ID", $"POWEROFF_TIME_OLD", $"POWERON_TIME_OLD", $"POWEROFF_TIME_NUM", $"POWERON_TIME_NUM")
      .orderBy($"METER_ID", $"POWEROFF_TIME_OLD")
      .show()

    //    val df1: DataFrame = sparkSession.sql(
    //      "SELECT 8201000092994090 AS METER_ID, 24 AS UA_CNT, 48 AS UB_CNT, 96 AS UC_CNT, 288 AS IA_CNT, 1440 AS IB_CNT, 20 AS UA_THRESHOLD_CNT, 40 AS UB_THRESHOLD_CNT, 90 AS UC_THRESHOLD_CNT, 280 AS IA_THRESHOLD_CNT, 1400 AS IB_THRESHOLD_CNT, 0 AS IC_CNT, 0 AS IC_THRESHOLD_CNT UNION " +
    //        "SELECT 8201000092994092 AS METER_ID, 1440 AS UA_CNT, 96 AS UB_CNT, 288 AS UC_CNT, 24 AS IA_CNT, 0 AS IB_CNT, 1400 AS UA_THRESHOLD_CNT, 90 AS UB_THRESHOLD_CNT, 280 AS UC_THRESHOLD_CNT, 20 AS IA_THRESHOLD_CNT, 0 AS IB_THRESHOLD_CNT, 48 AS IC_CNT, 40 AS IC_THRESHOLD_CNT ")
    //    df1.show()
    //
    //    // 停电影响点数 赋值 ->
    //    val df2: DataFrame = df1.join(meterPowerOffPointDf, Seq("METER_ID"), "left_outer").persist()
    //    df2.show()
    //
    //    df2
    //      .withColumn("POWER_UA_CNT", getPowerPoint($"UA_CNT", $"POWEROFF_TIME_NUM", $"POWERON_TIME_NUM"))
    //      .select($"METER_ID", $"POWEROFF_TIME_OLD", $"POWERON_TIME_OLD", $"POWEROFF_TIME_NUM", $"POWERON_TIME_NUM", $"UA_CNT", $"POWER_UA_CNT", $"UA_THRESHOLD_CNT")
    //      .show()
    //
    //    df2
    //      .withColumn("POWER_UB_CNT", getPowerPoint($"UB_CNT", $"POWEROFF_TIME_NUM", $"POWERON_TIME_NUM"))
    //      .select($"METER_ID", $"POWEROFF_TIME_OLD", $"POWERON_TIME_OLD", $"POWEROFF_TIME_NUM", $"POWERON_TIME_NUM", $"UB_CNT", $"POWER_UB_CNT", $"UB_THRESHOLD_CNT")
    //      .show()
    //
    //    df2
    //      .withColumn("POWER_UC_CNT", getPowerPoint($"UC_CNT", $"POWEROFF_TIME_NUM", $"POWERON_TIME_NUM"))
    //      .select($"METER_ID", $"POWEROFF_TIME_OLD", $"POWERON_TIME_OLD", $"POWEROFF_TIME_NUM", $"POWERON_TIME_NUM", $"UC_CNT", $"POWER_UC_CNT", $"UC_THRESHOLD_CNT")
    //      .show()
    //
    //    df2
    //      .withColumn("POWER_IA_CNT", getPowerPoint($"IA_CNT", $"POWEROFF_TIME_NUM", $"POWERON_TIME_NUM"))
    //      .select($"METER_ID", $"POWEROFF_TIME_OLD", $"POWERON_TIME_OLD", $"POWEROFF_TIME_NUM", $"POWERON_TIME_NUM", $"IA_CNT", $"POWER_IA_CNT", $"IA_THRESHOLD_CNT")
    //      .show()
    //
    //    df2
    //      .withColumn("POWER_IB_CNT", getPowerPoint($"IB_CNT", $"POWEROFF_TIME_NUM", $"POWERON_TIME_NUM"))
    //      .select($"METER_ID", $"POWEROFF_TIME_OLD", $"POWERON_TIME_OLD", $"POWEROFF_TIME_NUM", $"POWERON_TIME_NUM", $"IB_CNT", $"POWER_IB_CNT", $"IB_THRESHOLD_CNT")
    //      .show()

  }

  val getPowerPoint: UserDefinedFunction = udf((pointCnt: Long, powerOffPoint: String, powerOnPoint: String) => {
    val cnt24: List[String] = List("0000", "0100", "0200", "0300", "0400", "0500", "0600", "0700", "0800", "0900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900", "2000", "2100", "2200", "2300")
    val cnt48: List[String] = List("0000", "0030", "0100", "0130", "0200", "0230", "0300", "0330", "0400", "0430", "0500", "0530", "0600", "0630", "0700", "0730", "0800", "0830", "0900", "0930", "1000", "1030", "1100", "1130", "1200", "1230",
      "1300", "1330", "1400", "1430", "1500", "1530", "1600", "1630", "1700", "1730", "1800", "1830", "1900", "1930", "2000", "2030", "2100", "2130", "2200", "2230", "2300", "2330")
    val cnt96: List[String] = List("0000", "0015", "0030", "0045", "0100", "0115", "0130", "0145", "0200", "0215", "0230", "0245", "0300", "0315", "0330", "0345", "0400", "0415", "0430", "0445", "0500", "0515", "0530", "0545",
      "0600", "0615", "0630", "0645", "0700", "0715", "0730", "0745", "0800", "0815", "0830", "0845", "0900", "0915", "0930", "0945", "1000", "1015", "1030", "1045", "1100", "1115", "1130", "1145",
      "1200", "1215", "1230", "1245", "1300", "1315", "1330", "1345", "1400", "1415", "1430", "1445", "1500", "1515", "1530", "1545", "1600", "1615", "1630", "1645", "1700", "1715", "1730", "1745",
      "1800", "1815", "1830", "1845", "1900", "1915", "1930", "1945", "2000", "2015", "2030", "2045", "2100", "2115", "2130", "2145", "2200", "2215", "2230", "2245", "2300", "2315", "2330", "2345")
    val cnt288: List[String] = List("0000", "0005", "0010", "0015", "0020", "0025", "0030", "0035", "0040", "0045", "0050", "0055",
      "0100", "0105", "0110", "0115", "0120", "0125", "0130", "0135", "0140", "0145", "0150", "0155",
      "0200", "0205", "0210", "0215", "0220", "0225", "0230", "0235", "0240", "0245", "0250", "0255",
      "0300", "0305", "0310", "0315", "0320", "0325", "0330", "0335", "0340", "0345", "0350", "0355",
      "0400", "0405", "0410", "0415", "0420", "0425", "0430", "0435", "0440", "0445", "0450", "0455",
      "0500", "0505", "0510", "0515", "0520", "0525", "0530", "0535", "0540", "0545", "0550", "0555",
      "0600", "0605", "0610", "0615", "0620", "0625", "0630", "0635", "0640", "0645", "0650", "0655",
      "0700", "0705", "0710", "0715", "0720", "0725", "0730", "0735", "0740", "0745", "0750", "0755",
      "0800", "0805", "0810", "0815", "0820", "0825", "0830", "0835", "0840", "0845", "0850", "0855",
      "0900", "0905", "0910", "0915", "0920", "0925", "0930", "0935", "0940", "0945", "0950", "0955",
      "1000", "1005", "1010", "1015", "1020", "1025", "1030", "1035", "1040", "1045", "1050", "1055",
      "1100", "1105", "1110", "1115", "1120", "1125", "1130", "1135", "1140", "1145", "1150", "1155",
      "1200", "1205", "1210", "1215", "1220", "1225", "1230", "1235", "1240", "1245", "1250", "1255",
      "1300", "1305", "1310", "1315", "1320", "1325", "1330", "1335", "1340", "1345", "1350", "1355",
      "1400", "1405", "1410", "1415", "1420", "1425", "1430", "1435", "1440", "1445", "1450", "1455",
      "1500", "1505", "1510", "1515", "1520", "1525", "1530", "1535", "1540", "1545", "1550", "1555",
      "1600", "1605", "1610", "1615", "1620", "1625", "1630", "1635", "1640", "1645", "1650", "1655",
      "1700", "1705", "1710", "1715", "1720", "1725", "1730", "1735", "1740", "1745", "1750", "1755",
      "1800", "1805", "1810", "1815", "1820", "1825", "1830", "1835", "1840", "1845", "1850", "1855",
      "1900", "1905", "1910", "1915", "1920", "1925", "1930", "1935", "1940", "1945", "1950", "1955",
      "2000", "2005", "2010", "2015", "2020", "2025", "2030", "2035", "2040", "2045", "2050", "2055",
      "2100", "2105", "2110", "2115", "2120", "2125", "2130", "2135", "2140", "2145", "2150", "2155",
      "2200", "2205", "2210", "2215", "2220", "2225", "2230", "2235", "2240", "2245", "2250", "2255",
      "2300", "2305", "2310", "2315", "2320", "2325", "2330", "2335", "2340", "2345", "2350", "2355")
    val cnt1440: List[String] = List(
      "0000", "0001", "0002", "0003", "0004", "0005", "0006", "0007", "0008", "0009", "0010", "0011", "0012", "0013", "0014", "0015", "0016", "0017", "0018", "0019", "0020", "0021", "0022", "0023", "0024", "0025", "0026", "0027", "0028", "0029", "0030", "0031", "0032", "0033", "0034", "0035", "0036", "0037", "0038", "0039", "0040", "0041", "0042", "0043", "0044", "0045", "0046", "0047", "0048", "0049", "0050", "0051", "0052", "0053", "0054", "0055", "0056", "0057", "0058", "0059",
      "0100", "0101", "0102", "0103", "0104", "0105", "0106", "0107", "0108", "0109", "0110", "0111", "0112", "0113", "0114", "0115", "0116", "0117", "0118", "0119", "0120", "0121", "0122", "0123", "0124", "0125", "0126", "0127", "0128", "0129", "0130", "0131", "0132", "0133", "0134", "0135", "0136", "0137", "0138", "0139", "0140", "0141", "0142", "0143", "0144", "0145", "0146", "0147", "0148", "0149", "0150", "0151", "0152", "0153", "0154", "0155", "0156", "0157", "0158", "0159",
      "0200", "0201", "0202", "0203", "0204", "0205", "0206", "0207", "0208", "0209", "0210", "0211", "0212", "0213", "0214", "0215", "0216", "0217", "0218", "0219", "0220", "0221", "0222", "0223", "0224", "0225", "0226", "0227", "0228", "0229", "0230", "0231", "0232", "0233", "0234", "0235", "0236", "0237", "0238", "0239", "0240", "0241", "0242", "0243", "0244", "0245", "0246", "0247", "0248", "0249", "0250", "0251", "0252", "0253", "0254", "0255", "0256", "0257", "0258", "0259",
      "0300", "0301", "0302", "0303", "0304", "0305", "0306", "0307", "0308", "0309", "0310", "0311", "0312", "0313", "0314", "0315", "0316", "0317", "0318", "0319", "0320", "0321", "0322", "0323", "0324", "0325", "0326", "0327", "0328", "0329", "0330", "0331", "0332", "0333", "0334", "0335", "0336", "0337", "0338", "0339", "0340", "0341", "0342", "0343", "0344", "0345", "0346", "0347", "0348", "0349", "0350", "0351", "0352", "0353", "0354", "0355", "0356", "0357", "0358", "0359",
      "0400", "0401", "0402", "0403", "0404", "0405", "0406", "0407", "0408", "0409", "0410", "0411", "0412", "0413", "0414", "0415", "0416", "0417", "0418", "0419", "0420", "0421", "0422", "0423", "0424", "0425", "0426", "0427", "0428", "0429", "0430", "0431", "0432", "0433", "0434", "0435", "0436", "0437", "0438", "0439", "0440", "0441", "0442", "0443", "0444", "0445", "0446", "0447", "0448", "0449", "0450", "0451", "0452", "0453", "0454", "0455", "0456", "0457", "0458", "0459",
      "0500", "0501", "0502", "0503", "0504", "0505", "0506", "0507", "0508", "0509", "0510", "0511", "0512", "0513", "0514", "0515", "0516", "0517", "0518", "0519", "0520", "0521", "0522", "0523", "0524", "0525", "0526", "0527", "0528", "0529", "0530", "0531", "0532", "0533", "0534", "0535", "0536", "0537", "0538", "0539", "0540", "0541", "0542", "0543", "0544", "0545", "0546", "0547", "0548", "0549", "0550", "0551", "0552", "0553", "0554", "0555", "0556", "0557", "0558", "0559",
      "0600", "0601", "0602", "0603", "0604", "0605", "0606", "0607", "0608", "0609", "0610", "0611", "0612", "0613", "0614", "0615", "0616", "0617", "0618", "0619", "0620", "0621", "0622", "0623", "0624", "0625", "0626", "0627", "0628", "0629", "0630", "0631", "0632", "0633", "0634", "0635", "0636", "0637", "0638", "0639", "0640", "0641", "0642", "0643", "0644", "0645", "0646", "0647", "0648", "0649", "0650", "0651", "0652", "0653", "0654", "0655", "0656", "0657", "0658", "0659",
      "0700", "0701", "0702", "0703", "0704", "0705", "0706", "0707", "0708", "0709", "0710", "0711", "0712", "0713", "0714", "0715", "0716", "0717", "0718", "0719", "0720", "0721", "0722", "0723", "0724", "0725", "0726", "0727", "0728", "0729", "0730", "0731", "0732", "0733", "0734", "0735", "0736", "0737", "0738", "0739", "0740", "0741", "0742", "0743", "0744", "0745", "0746", "0747", "0748", "0749", "0750", "0751", "0752", "0753", "0754", "0755", "0756", "0757", "0758", "0759",
      "0800", "0801", "0802", "0803", "0804", "0805", "0806", "0807", "0808", "0809", "0810", "0811", "0812", "0813", "0814", "0815", "0816", "0817", "0818", "0819", "0820", "0821", "0822", "0823", "0824", "0825", "0826", "0827", "0828", "0829", "0830", "0831", "0832", "0833", "0834", "0835", "0836", "0837", "0838", "0839", "0840", "0841", "0842", "0843", "0844", "0845", "0846", "0847", "0848", "0849", "0850", "0851", "0852", "0853", "0854", "0855", "0856", "0857", "0858", "0859",
      "0900", "0901", "0902", "0903", "0904", "0905", "0906", "0907", "0908", "0909", "0910", "0911", "0912", "0913", "0914", "0915", "0916", "0917", "0918", "0919", "0920", "0921", "0922", "0923", "0924", "0925", "0926", "0927", "0928", "0929", "0930", "0931", "0932", "0933", "0934", "0935", "0936", "0937", "0938", "0939", "0940", "0941", "0942", "0943", "0944", "0945", "0946", "0947", "0948", "0949", "0950", "0951", "0952", "0953", "0954", "0955", "0956", "0957", "0958", "0959",
      "1000", "1001", "1002", "1003", "1004", "1005", "1006", "1007", "1008", "1009", "1010", "1011", "1012", "1013", "1014", "1015", "1016", "1017", "1018", "1019", "1020", "1021", "1022", "1023", "1024", "1025", "1026", "1027", "1028", "1029", "1030", "1031", "1032", "1033", "1034", "1035", "1036", "1037", "1038", "1039", "1040", "1041", "1042", "1043", "1044", "1045", "1046", "1047", "1048", "1049", "1050", "1051", "1052", "1053", "1054", "1055", "1056", "1057", "1058", "1059",
      "1100", "1101", "1102", "1103", "1104", "1105", "1106", "1107", "1108", "1109", "1110", "1111", "1112", "1113", "1114", "1115", "1116", "1117", "1118", "1119", "1120", "1121", "1122", "1123", "1124", "1125", "1126", "1127", "1128", "1129", "1130", "1131", "1132", "1133", "1134", "1135", "1136", "1137", "1138", "1139", "1140", "1141", "1142", "1143", "1144", "1145", "1146", "1147", "1148", "1149", "1150", "1151", "1152", "1153", "1154", "1155", "1156", "1157", "1158", "1159",
      "1200", "1201", "1202", "1203", "1204", "1205", "1206", "1207", "1208", "1209", "1210", "1211", "1212", "1213", "1214", "1215", "1216", "1217", "1218", "1219", "1220", "1221", "1222", "1223", "1224", "1225", "1226", "1227", "1228", "1229", "1230", "1231", "1232", "1233", "1234", "1235", "1236", "1237", "1238", "1239", "1240", "1241", "1242", "1243", "1244", "1245", "1246", "1247", "1248", "1249", "1250", "1251", "1252", "1253", "1254", "1255", "1256", "1257", "1258", "1259",
      "1300", "1301", "1302", "1303", "1304", "1305", "1306", "1307", "1308", "1309", "1310", "1311", "1312", "1313", "1314", "1315", "1316", "1317", "1318", "1319", "1320", "1321", "1322", "1323", "1324", "1325", "1326", "1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341", "1342", "1343", "1344", "1345", "1346", "1347", "1348", "1349", "1350", "1351", "1352", "1353", "1354", "1355", "1356", "1357", "1358", "1359",
      "1400", "1401", "1402", "1403", "1404", "1405", "1406", "1407", "1408", "1409", "1410", "1411", "1412", "1413", "1414", "1415", "1416", "1417", "1418", "1419", "1420", "1421", "1422", "1423", "1424", "1425", "1426", "1427", "1428", "1429", "1430", "1431", "1432", "1433", "1434", "1435", "1436", "1437", "1438", "1439", "1440", "1441", "1442", "1443", "1444", "1445", "1446", "1447", "1448", "1449", "1450", "1451", "1452", "1453", "1454", "1455", "1456", "1457", "1458", "1459",
      "1500", "1501", "1502", "1503", "1504", "1505", "1506", "1507", "1508", "1509", "1510", "1511", "1512", "1513", "1514", "1515", "1516", "1517", "1518", "1519", "1520", "1521", "1522", "1523", "1524", "1525", "1526", "1527", "1528", "1529", "1530", "1531", "1532", "1533", "1534", "1535", "1536", "1537", "1538", "1539", "1540", "1541", "1542", "1543", "1544", "1545", "1546", "1547", "1548", "1549", "1550", "1551", "1552", "1553", "1554", "1555", "1556", "1557", "1558", "1559",
      "1600", "1601", "1602", "1603", "1604", "1605", "1606", "1607", "1608", "1609", "1610", "1611", "1612", "1613", "1614", "1615", "1616", "1617", "1618", "1619", "1620", "1621", "1622", "1623", "1624", "1625", "1626", "1627", "1628", "1629", "1630", "1631", "1632", "1633", "1634", "1635", "1636", "1637", "1638", "1639", "1640", "1641", "1642", "1643", "1644", "1645", "1646", "1647", "1648", "1649", "1650", "1651", "1652", "1653", "1654", "1655", "1656", "1657", "1658", "1659",
      "1700", "1701", "1702", "1703", "1704", "1705", "1706", "1707", "1708", "1709", "1710", "1711", "1712", "1713", "1714", "1715", "1716", "1717", "1718", "1719", "1720", "1721", "1722", "1723", "1724", "1725", "1726", "1727", "1728", "1729", "1730", "1731", "1732", "1733", "1734", "1735", "1736", "1737", "1738", "1739", "1740", "1741", "1742", "1743", "1744", "1745", "1746", "1747", "1748", "1749", "1750", "1751", "1752", "1753", "1754", "1755", "1756", "1757", "1758", "1759",
      "1800", "1801", "1802", "1803", "1804", "1805", "1806", "1807", "1808", "1809", "1810", "1811", "1812", "1813", "1814", "1815", "1816", "1817", "1818", "1819", "1820", "1821", "1822", "1823", "1824", "1825", "1826", "1827", "1828", "1829", "1830", "1831", "1832", "1833", "1834", "1835", "1836", "1837", "1838", "1839", "1840", "1841", "1842", "1843", "1844", "1845", "1846", "1847", "1848", "1849", "1850", "1851", "1852", "1853", "1854", "1855", "1856", "1857", "1858", "1859",
      "1900", "1901", "1902", "1903", "1904", "1905", "1906", "1907", "1908", "1909", "1910", "1911", "1912", "1913", "1914", "1915", "1916", "1917", "1918", "1919", "1920", "1921", "1922", "1923", "1924", "1925", "1926", "1927", "1928", "1929", "1930", "1931", "1932", "1933", "1934", "1935", "1936", "1937", "1938", "1939", "1940", "1941", "1942", "1943", "1944", "1945", "1946", "1947", "1948", "1949", "1950", "1951", "1952", "1953", "1954", "1955", "1956", "1957", "1958", "1959",
      "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059",
      "2100", "2101", "2102", "2103", "2104", "2105", "2106", "2107", "2108", "2109", "2110", "2111", "2112", "2113", "2114", "2115", "2116", "2117", "2118", "2119", "2120", "2121", "2122", "2123", "2124", "2125", "2126", "2127", "2128", "2129", "2130", "2131", "2132", "2133", "2134", "2135", "2136", "2137", "2138", "2139", "2140", "2141", "2142", "2143", "2144", "2145", "2146", "2147", "2148", "2149", "2150", "2151", "2152", "2153", "2154", "2155", "2156", "2157", "2158", "2159",
      "2200", "2201", "2202", "2203", "2204", "2205", "2206", "2207", "2208", "2209", "2210", "2211", "2212", "2213", "2214", "2215", "2216", "2217", "2218", "2219", "2220", "2221", "2222", "2223", "2224", "2225", "2226", "2227", "2228", "2229", "2230", "2231", "2232", "2233", "2234", "2235", "2236", "2237", "2238", "2239", "2240", "2241", "2242", "2243", "2244", "2245", "2246", "2247", "2248", "2249", "2250", "2251", "2252", "2253", "2254", "2255", "2256", "2257", "2258", "2259",
      "2300", "2301", "2302", "2303", "2304", "2305", "2306", "2307", "2308", "2309", "2310", "2311", "2312", "2313", "2314", "2315", "2316", "2317", "2318", "2319", "2320", "2321", "2322", "2323", "2324", "2325", "2326", "2327", "2328", "2329", "2330", "2331", "2332", "2333", "2334", "2335", "2336", "2337", "2338", "2339", "2340", "2341", "2342", "2343", "2344", "2345", "2346", "2347", "2348", "2349", "2350", "2351", "2352", "2353", "2354", "2355", "2356", "2357", "2358", "2359")

    val foreachCnt: List[String] = pointCnt match {
      case 24 => cnt24
      case 48 => cnt48
      case 96 => cnt96
      case 288 => cnt288
      case 1440 => cnt1440
      case _ => List("2400") // 无意义值
    }

    var powerPoint: Int = 0
    foreachCnt.foreach(x => {
      if (x >= powerOffPoint && x <= powerOnPoint) {
        powerPoint += 1
      }
    })
    powerPoint
  })

  private def getMeterPowerOffPoint(sparkSession: SparkSession): DataFrame = {

    val df: DataFrame = sparkSession.sql(
      "SELECT 8201000092994090 AS METER_ID, '2024-04-07 10:45:24' AS POWEROFF_TIME, '' AS POWERON_TIME UNION " +
        "SELECT 8201000092994090 AS METER_ID, '2024-04-07 14:28:24' AS POWEROFF_TIME, '2024-04-07 15:00:00' AS POWERON_TIME UNION " +
        "SELECT 8201000092994092 AS METER_ID, '2024-04-07 10:57:24' AS POWEROFF_TIME, '2024-04-07 17:58:52' AS POWERON_TIME UNION " +
        "SELECT 8201000092994092 AS METER_ID, '2024-04-07 18:00:00' AS POWEROFF_TIME, '2024-04-07 18:04:52' AS POWERON_TIME UNION " +
        "SELECT 8201000092994092 AS METER_ID, '2024-04-07 10:50:00' AS POWEROFF_TIME, '2024-04-07 11:15:52' AS POWERON_TIME UNION " +
        "SELECT 8201000092994092 AS METER_ID, '2024-04-07 18:05:20' AS POWEROFF_TIME, '2024-04-07 23:59:00' AS POWERON_TIME")
      .withColumn("POWEROFF_TIME", $"POWEROFF_TIME".cast(TimestampType))
      .withColumn("POWERON_TIME", $"POWERON_TIME".cast(TimestampType))
      .persist()
    df.orderBy($"METER_ID", $"POWEROFF_TIME").show()

    val df1: DataFrame = df
      // 重新赋值 复电时间 1.查看停复电是否在同一天,如果不在将复电时间赋值第二天零时 2.复电时间为空 置为下一条的停电时间-1
      //      .withColumn("POWERON_TIME", when($"POWERON_TIME".isNotNull, $"POWERON_TIME").otherwise(lead($"POWEROFF_TIME", 1) over Window.partitionBy($"METER_ID").orderBy($"POWEROFF_TIME")))
      .withColumn("POWERON_TIME", when($"POWERON_TIME".isNotNull,
        when(to_date($"POWERON_TIME", "yyyy-MM-dd") === to_date($"POWEROFF_TIME", "yyyy-MM-dd"), $"POWERON_TIME")
          .otherwise(concat(to_date(from_unixtime(unix_timestamp($"POWEROFF_TIME") + (60 * 60 * 24), "yyyy-MM-dd HH:mm:ss"), "yyyy-MM-dd"), lit(" 00:00:00")).cast(TimestampType))
      ).otherwise(lead(from_unixtime(unix_timestamp($"POWEROFF_TIME") - 1, "yyyy-MM-dd HH:mm:ss"), 1) over Window.partitionBy($"METER_ID").orderBy($"POWEROFF_TIME")))
      .withColumn("POWEROFF_TIME1", date_format($"POWEROFF_TIME", "yyyy-MM-dd HH:mm").cast(TimestampType))
      .withColumn("POWERON_TIME1", date_format($"POWERON_TIME", "yyyy-MM-dd HH:mm").cast(TimestampType))
      .withColumn("POWEROFF_TIME2", when($"POWEROFF_TIME" > $"POWEROFF_TIME1", from_unixtime(unix_timestamp($"POWEROFF_TIME1") + 60, "yyyy-MM-dd HH:mm:ss")).otherwise($"POWEROFF_TIME1"))
      .withColumn("POWERON_TIME2", when($"POWERON_TIME" <= $"POWERON_TIME1", from_unixtime(unix_timestamp($"POWERON_TIME1") - 60, "yyyy-MM-dd HH:mm:ss")).otherwise($"POWERON_TIME1"))

    df1.orderBy($"METER_ID", $"POWEROFF_TIME").show()

    val df2: DataFrame = df1
      .select($"METER_ID", $"POWEROFF_TIME" as "POWEROFF_TIME_OLD", $"POWERON_TIME" as "POWERON_TIME_OLD", $"POWEROFF_TIME2" as "POWEROFF_TIME", $"POWERON_TIME2" as "POWERON_TIME")
      .withColumn("POWEROFF_TIME_NUM", date_format($"POWEROFF_TIME", "HHmm").cast(StringType))
      .withColumn("POWERON_TIME_NUM", date_format($"POWERON_TIME", "HHmm").cast(StringType))

    df2
  }

}
